~~~General~~~
Every Loop has bare minimum 6 'tasks' performed with each iteration
1. item lookup for item in item.length
2. evaluation i < item.length
3. evaluate i < item.lenght === true
4. look up value of variables inside function (item[i])
5. do work in function
6. increment i++

cut down on 1-3 by saving in variable var = item.length
- for (var i=0, len=items.length; i < len; i++)
even better - when possible, if ordeer doesnt matter: 
- one i=0 loop doesn't evaluate, so equnivalent to i < length (no need to worry about <=)
- for (i=items.length, i--);
- let j = items.length
  while (j--)
- let k = items.length -1 (because the 'do' means that need to have this happen one less time)
  do {} while (k--)

if loop iterations over 1,000 --> Duffs Device

~~~Loop Types~~~
1. For Loop, For While, Do While 
- Speed mostly the same - fastest of loops
- Do While performs the action at least once (vs for while)



2. For (let [element] OF [array])

 - can be used to loop though key value pairs in object, but not very efficient

3. For (let [element] IN [object])
- more efficiennt than 



https://www.oreilly.com/library/view/high-performance-javascript/9781449382308/ch04.html
https://thecodebarbarian.com/for-vs-for-each-vs-for-in-vs-for-of-in-javascript



forEach() vs Map()
forEach does not return anything; map returns an array;
neither mutate the originl array, UNLESS a callback is used for forEach; map still does not