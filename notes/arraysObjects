// Sample Object:

var exObj = {
    key1: "value1",
    key2: 40,
    key3: [1, "item2", 3],
    key4: {
        key4_1: "value4_1",
        key4_2: "value4_2",
        key4_3: [
            "item4_1", 
            "item4_2", 
            3,
            {
                item4_4_1: "value4_4_1",
                item4_4_2: "value4_4_2",
                item4_4_3: ["item4_4_1", "item4_4_2", 443]
            },
        ],
        
    },
    key5: function(){
        var memo = this.key1 + this.key2;
        return memo;
    }
}

// ***Accessing Information***
// Objects:
// 1. exObj["key1"] --> use this when there are periods or numbers
// 2. exObj.key2
// 3. exObj["key4"].key4_3[3].item4_4_3 = ["item4_4_1", "item4_4_2", 443]
// 4. exObj["key4"]["key4_3"[3]].item4_4_3 = ["item4_4_1", "item4_4_2", 443]
// 5. if using a variable to reference, then do not need quotes inside brackets.  ex:  exObj["key4"][varKey4_3[3]].item4_4_3


/////Checking for Existence
1. Key in Object:
    a. if ('undefined' !== typeof Obj['prop']){do Something}    speed=6
    b. if ('prop' in Obj){do something}                         speed=3
    c. if (Obj.hasOwnProperty('prop')){do Something}            speed=4



https://andrew.hedges.name/experiments/in/

/////Setting
1. object[key] = value;


/////Map object
*. If used new Map object, then:
    a. namedMap.get(value) = returns thing or undefined;
    b. namedMap.set('key','value');